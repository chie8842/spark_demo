{"paragraphs":[{"title":"MatrixFactorizationモデルを用いたレコメンデーション","text":"%spark.pyspark\n\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.recommendation import ALSModel\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\n# 本来は訓練データと評価データを分けるべきだが、\n# MatrixFactorizationモデルの場合、分けることが難しいので、\n# 訓練データと評価データは同じものを使用している。\n\n# データの読み込み\nratings_csv = \"s3://chie8842_pycon2017/data/movielens/ratings.csv\"\nratings = spark.read.csv(ratings_csv, header=\"true\")\n\n# モデル学習のインプットの型はInt型なので、\n# String型をInt型の一意なIDに変換してくれるStirngIndexerを使う。\nindexers = [StringIndexer(inputCol=column, outputCol=column+\"_index\")\n            .fit(ratings) for column in [\"userId\", \"movieId\", \"rating\"] ]\n\n# ALSのパラメータ設定\nals = ALS(\n    rank=40,\n    maxIter=10,\n    seed=0,\n    userCol=\"userId_index\",\n    itemCol=\"movieId_index\",\n    ratingCol=\"rating_index\")\n\nindexers.append(als)\n\n# パイプラインで処理を実行する\npipeline = Pipeline(stages=indexers)\n\n# モデルの学習\nmodel = pipeline.fit(ratings)\n\n#  モデルによるrating値の予測\npredictions = model.transform(ratings)\n\n# rmseによるモデルの評価\nevaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=\"rating_index\", \n                                predictionCol=\"prediction\")\n\nrmse = evaluator.evaluate(predictions)\nprint(\"Root-mean-square error = \" + str(rmse))","dateUpdated":"2017-10-11T10:20:46+0000","config":{"lineNumbers":true,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Root-mean-square error = 0.765455168552\n"}]},"apps":[],"jobName":"paragraph_1507717246156_-894365082","id":"20170907-201301_1937042007","dateCreated":"2017-10-11T10:20:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2372"},{"text":"%spark.pyspark\n\nfrom pyspark.sql.functions import split, explode\n\n# 全ユーザに対して予測値の高いmovieを10個レコメンドする\npre_predicted = (model\n                 .stages[-1]\n                 .recommendForAllUsers(10)\n                 .select(\n                     \"userId_index\"\n                     ,explode(\"recommendations\").alias(\"exploded\")))\npredicted = (pre_predicted\n             .select(\"userId_index\"\n                     , pre_predicted.exploded.movieId_index.alias(\"movieId_index\")\n                     , pre_predicted.exploded.rating.alias(\"rating\")))\n\n\npredicted.show(truncate=False)","dateUpdated":"2017-10-11T10:20:46+0000","config":{"colWidth":12,"lineNumbers":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+-------------+---------+\n|userId_index|movieId_index|rating   |\n+------------+-------------+---------+\n|471         |1335         |2.5067835|\n|471         |582          |2.2069256|\n|471         |1965         |2.0647614|\n|471         |2855         |2.0545995|\n|471         |1522         |2.0078022|\n|471         |3009         |1.9890733|\n|471         |632          |1.9824231|\n|471         |810          |1.9466014|\n|471         |2920         |1.929863 |\n|471         |953          |1.9287404|\n|463         |315          |5.3014526|\n|463         |899          |4.1537457|\n|463         |1082         |3.9275477|\n|463         |3180         |3.8570085|\n|463         |452          |3.7146056|\n|463         |3373         |3.6828537|\n|463         |1100         |3.6639254|\n|463         |3115         |3.6426742|\n|463         |1296         |3.6373613|\n|463         |5218         |3.516369 |\n+------------+-------------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1507717246156_-894365082","id":"20170907-201341_1432775492","dateCreated":"2017-10-11T10:20:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2373"},{"text":"%spark.pyspark\n","dateUpdated":"2017-10-11T10:20:46+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1507717246157_-894749831","id":"20170907-201405_1072747075","dateCreated":"2017-10-11T10:20:46+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2374"}],"name":"movielens_demo","id":"2CXWW3MPW","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}